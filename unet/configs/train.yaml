---
imports:
- "$import pandas as pd"
- "$import scripts"
- "$from scripts.utils import num_workers"
- "$from scripts.utils import get_datalist"
input_channels: 1
output_channels: 105
output_dir: "$@bundle_root + 'output'"
ckpt_dir: "$@bundle_root + 'ckpts'"
ckpt_path: "/models/model.pt"
dataset_dir: "/sc-projects/sc-proj-dha/"
train_data_dict:  "$get_datalist('train')"
valid_data_dict:  "$get_datalist('valid')"
image_key: image
label_key: label
device: "$torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')"
num_workers: "$num_workers()"
epochs: 400
batch_size: 1
network: "$@network_def.to(@device)"
loss:
  _target_: DiceCELoss
  include_background: false
  to_onehot_y: true
  softmax: true
optimizer:
  _target_: torch.optim.Adam
  params: "$@network.parameters()"
  lr: 0.0005
  weight_decay: 0.001
lr_scheduler:
  _target_: torch.optim.lr_scheduler.OneCycleLR
  optimizer: "@optimizer"
  max_lr: 0.0005
  epochs: "@epochs"
  steps_per_epoch: "$len(@train_data_dict) // @batch_size"
val_interval: 1
train:
  deterministic_transforms:
  - _target_: LoadImaged
    keys:
    - "@image_key"
    - "@label_key"
  - _target_: EnsureChannelFirstd
    keys:
    - "@image_key"
    - "@label_key"
  - _target_: Spacingd
    keys:
    - "@image_key"
    - "@label_key"
    pixdim:
    - 3
    - 3
    - 3
    mode:
    - bilinear
    - nearest
    align_corners:
    - true
    - true
  - _target_: scripts.transforms.MatchSized
    keys: "@label_key"
    reference_key: "@image_key"
    mode: nearest
  - _target_: scripts.transforms.ApplyWindowingd
    keys: "@image_key"
    lower: -450
    upper: 600
  - _target_: CastToTyped
    keys: "@image_key"
    dtype: "$torch.float32"
  - _target_: NormalizeIntensityd
    keys: "@image_key"
  - _target_: ScaleIntensityd
    keys: "@image_key"
    minv: 0
    maxv: 1
  random_transforms:
  - _target_: RandCropByPosNegLabeld
    keys:
    - "@image_key"
    - "@label_key"
    label_key: "@label_key"
    neg: 2
    num_samples: 8
    pos: 6
    spatial_size:
    - 64
    - 64
    - 64
    allow_smaller: True
  - _target_: SpatialPadd
    keys:
    - "@image_key"
    - "@label_key"
    spatial_size: 
    - 64
    - 64
    - 64
    mode: constant
  - _target_: RandScaleIntensityd
    keys: "@image_key"
    factors: 0.3
    prob: 0.5
  - _target_: RandShiftIntensityd
    keys: "@image_key"
    offsets: 0.1
    prob: 0.5
  - _target_: RandGaussianNoised
    keys: "@image_key"
    std: 0.01
    prob: 0.15
  - _target_: RandFlipd
    keys:
    - "@image_key"
    - "@label_key"
    spatial_axis: 0
    prob: 0.5
  - _target_: RandFlipd
    keys:
    - "@image_key"
    - "@label_key"
    spatial_axis: 1
    prob: 0.5
  - _target_: RandFlipd
    keys:
    - "@image_key"
    - "@label_key"
    spatial_axis: 2
    prob: 0.5
  - _target_: CastToTyped
    keys:
    - "@image_key"
    - "@label_key"
    dtype:
    - "$torch.float32"
    - "$torch.uint8"
  - _target_: ToTensord
    keys:
    - "@image_key"
    - "@label_key"
  preprocessing:
    _target_: Compose
    transforms: "$@train#deterministic_transforms + @train#random_transforms"
  dataset:
    _target_: PersistentDataset
    data: "@train_data_dict"
    transform: "@train#preprocessing"
    cache_dir: "@cache_dir"
  dataloader:
    _target_: DataLoader
    dataset: "@train#dataset"
    batch_size: "@batch_size"
    shuffle: true
    num_workers: "@num_workers"
  inferer:
    _target_: SimpleInferer
  postprocessing:
    _target_: Compose
    transforms:
    - _target_: AsDiscreted
      keys:
      - pred
      - "@label_key"
      argmax:
      - true
      - false
      to_onehot: "@output_channels"
  handlers:
  - _target_: CheckpointLoader
    load_path: "$@bundle_root + @ckpt_path"
    load_dict:
      network: "@network"
  - _target_: LrScheduleHandler
    lr_scheduler: "@lr_scheduler"
    print_lr: true
  - _target_: ValidationHandler
    validator: "@validate#evaluator"
    epoch_level: true
    interval: "@val_interval"
  - _target_: StatsHandler
    tag_name: train_loss
    output_transform: "$monai.handlers.from_engine(['loss'], first=True)"
#  - _target_: TensorBoardStatsHandler
#    log_dir: "@output_dir"
#    tag_name: train_loss
#    output_transform: "$monai.handlers.from_engine(['loss'], first=True)"
  key_metric:
    train_mean_dice:
      _target_: MeanDice
      include_background: false
      output_transform: "$monai.handlers.from_engine(['pred', 'label'])"
  trainer:
    _target_: SupervisedTrainer
    max_epochs: "@epochs"
    device: "@device"
    train_data_loader: "@train#dataloader"
    network: "@network"
    loss_function: "@loss"
    optimizer: "@optimizer"
    inferer: "@train#inferer"
    postprocessing: "@train#postprocessing"
    key_train_metric: "@train#key_metric"
    train_handlers: "@train#handlers"
    amp: true
validate:
  preprocessing:
    _target_: Compose
    transforms: "%train#deterministic_transforms"
  dataset:
    _target_: PersistentDataset
    data: "@valid_data_dict"
    transform: "@validate#preprocessing"
    cache_dir: "@cache_dir"
  dataloader:
    _target_: DataLoader
    dataset: "@validate#dataset"
    batch_size: 1
    shuffle: false
    num_workers: "@num_workers"
  inferer:
    _target_: SlidingWindowInferer
    roi_size:
    - 64
    - 64
    - 64
    sw_batch_size: 2
    overlap: 0.3750
    progress: True
  postprocessing: "%train#postprocessing"
  handlers:
  - _target_: StatsHandler
    iteration_log: false
  - _target_: CheckpointSaver
    save_dir: "@ckpt_dir"
    save_dict:
      network: "@network"
      optimizer: "@optimizer"
    save_key_metric: true
#  - _target_: MetricsSaver
#    save_dir: "@output_dir"
#    metric_details: "*"
#    delimiter: ","
# - _target_: scripts.handlers.PushnotificationHandler
#    credentials: "/home/bressekk/.pushover_credentials.yaml"
#    identifier: "UNET Total Segemntator"
  key_metric:
    val_mean_dice:
      _target_: MeanDice
      include_background: false
      output_transform: "$monai.handlers.from_engine(['pred', 'label'])"
  evaluator:
    _target_: SupervisedEvaluator
    device: "@device"
    val_data_loader: "@validate#dataloader"
    network: "@network"
    inferer: "@validate#inferer"
    postprocessing: "@validate#postprocessing"
    key_val_metric: "@validate#key_metric"
    val_handlers: "@validate#handlers"
    amp: true
training:
- "$monai.utils.set_determinism(seed=42)"
- "$setattr(torch.backends.cudnn, 'benchmark', True)"
- "$@train#trainer.run()"
